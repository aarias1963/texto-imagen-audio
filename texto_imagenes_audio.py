import streamlit as st
import requests
import base64
import io
import time
from PIL import Image
from io import BytesIO
import json
import os
import hashlib
from typing import Optional, Dict, Any

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Generador de Contenido Multimedia - Claude & Flux",
    page_icon="üé®",
    layout="wide"
)

# Inicializar session state para mantener resultados
if 'generated_content' not in st.session_state:
    st.session_state.generated_content = {}

if 'generation_complete' not in st.session_state:
    st.session_state.generation_complete = False

# NUEVO: Session state para secuencias de personajes
if 'character_sequence_mode' not in st.session_state:
    st.session_state.character_sequence_mode = False

if 'character_analysis' not in st.session_state:
    st.session_state.character_analysis = None

if 'character_images' not in st.session_state:
    st.session_state.character_images = []

if 'sequence_generation_complete' not in st.session_state:
    st.session_state.sequence_generation_complete = False

# T√≠tulo principal
st.title("üé® Generador de Contenido Multimedia")
st.markdown("*Powered by Claude Sonnet 4 & Flux - Transforma tus ideas en texto, im√°genes y audio*")

# Sidebar para configuraci√≥n
with st.sidebar:
    st.header("‚öôÔ∏è Configuraci√≥n")
    
    # APIs keys
    st.subheader("Claves de API")
    anthropic_api_key = st.text_input("Anthropic API Key", type="password", help="Para generaci√≥n de texto con Claude Sonnet 4")
    bfl_api_key = st.text_input("Black Forest Labs API Key", type="password", help="Para generaci√≥n de im√°genes con Flux")
    openai_api_key = st.text_input("OpenAI API Key", type="password", help="Para generaci√≥n de audio TTS")
    
    # Configuraciones del modelo
    st.subheader("Configuraci√≥n de Modelos")
    
    # Modelo de Claude
    claude_model = st.selectbox(
        "Modelo de Claude",
        ["claude-sonnet-4-20250514", "claude-3-5-sonnet-20241022"],
        index=0,
        help="Claude Sonnet 4 es el m√°s reciente y avanzado"
    )
    
    # Configuraci√≥n de Flux
    flux_model = st.selectbox(
        "Modelo de Flux",
        ["flux-pro-1.1", "flux-pro-1.1-ultra"],
        index=0,
        help="Pro 1.1 permite control de dimensiones, Ultra es para m√°xima calidad"
    )
    
    flux_steps = st.slider("Pasos de generaci√≥n (Flux)", 1, 50, 25, help="M√°s pasos = mejor calidad pero m√°s tiempo")
    
    # Estilo de imagen
    image_style = st.selectbox(
        "Estilo de imagen",
        ["photorealistic", "digital-art", "cinematic", "documentary", "portrait"],
        index=0,
        help="Estilo visual para la generaci√≥n de im√°genes"
    )
    
    # Configuraci√≥n de audio
    voice_model = st.selectbox(
        "Voz para Audio",
        ["alloy", "echo", "fable", "onyx", "nova", "shimmer"],
        index=0
    )
    
    # Configuraciones adicionales
    st.subheader("Configuraciones Avanzadas")
    max_tokens_claude = st.number_input("Max tokens Claude", 500, 4000, 2000)
    
    # NUEVO: Configuraci√≥n para secuencias de personajes
    st.subheader("üé≠ Secuencias de Personajes")
    sequence_mode = st.checkbox(
        "Activar modo secuencia",
        value=st.session_state.character_sequence_mode,
        help="Genera m√∫ltiples im√°genes con los mismos personajes"
    )
    
    if sequence_mode != st.session_state.character_sequence_mode:
        st.session_state.character_sequence_mode = sequence_mode
        # Limpiar datos anteriores si se cambia el modo
        if not sequence_mode:
            st.session_state.character_analysis = None
            st.session_state.character_images = []
            st.session_state.sequence_generation_complete = False
        st.rerun()
    
    # Configuraciones espec√≠ficas seg√∫n modelo de Flux
    if flux_model == "flux-pro-1.1":
        image_width = st.selectbox("Ancho de imagen", [512, 768, 1024, 1344], index=2)
        image_height = st.selectbox("Alto de imagen", [512, 768, 1024, 1344], index=2)
    else:  # Ultra
        st.info("üí° Flux Ultra maneja las dimensiones autom√°ticamente")
        image_width = 1024  # Valor por defecto para Ultra
        image_height = 1024

# ===============================
# FUNCIONES PARA DETECCI√ìN DE PERSONAJES
# ===============================

def analyze_characters_with_claude(text_content: str, content_type: str, api_key: str, model: str) -> Dict[str, Any]:
    """Analiza el texto con Claude para detectar personajes y generar character cards con escenas espec√≠ficas y variadas"""
    try:
        headers = {
            "x-api-key": api_key,
            "Content-Type": "application/json",
            "anthropic-version": "2023-06-01"
        }
        
        system_prompt = """Eres un experto en an√°lisis narrativo y direcci√≥n visual cinematogr√°fica. Tu tarea es analizar texto narrativo y extraer informaci√≥n detallada sobre personajes para generar secuencias de im√°genes visualmente variadas pero consistentes.

INSTRUCCIONES CLAVE:
1. Identifica TODOS los personajes principales con caracter√≠sticas f√≠sicas espec√≠ficas
2. Analiza el relato MOMENTO A MOMENTO para extraer escenas clave
3. Para cada escena, genera una descripci√≥n visual √öNICA con diferentes:
   - √Ångulos de c√°mara (close-up, wide shot, medium shot, etc.)
   - Emociones y expresiones espec√≠ficas del momento
   - Composici√≥n visual (primer plano, plano general, etc.)
   - Iluminaci√≥n y ambiente seg√∫n la narrativa
   - Poses y acciones espec√≠ficas del personaje

FORMATO DE RESPUESTA (JSON v√°lido):
{
  "has_characters": true/false,
  "characters": [
    {
      "name": "nombre_descriptivo",
      "type": "human/animal/creature",
      "physical_description": "descripci√≥n f√≠sica DETALLADA en ingl√©s (color espec√≠fico, caracter√≠sticas √∫nicas, tama√±o, etc.)",
      "key_features": ["caracter√≠stica f√≠sica espec√≠fica 1", "caracter√≠stica f√≠sica espec√≠fica 2", "caracter√≠stica f√≠sica espec√≠fica 3"],
      "suggested_scenes": [
        {
          "action": "momento espec√≠fico del relato",
          "scene_description": "descripci√≥n visual COMPLETA en ingl√©s incluyendo: [PERSONAJE con caracter√≠sticas f√≠sicas], [ACCI√ìN espec√≠fica], [EMOCI√ìN visible], [COMPOSICI√ìN de c√°mara], [AMBIENTE/ILUMINACI√ìN], [ELEMENTOS del entorno]",
          "visual_composition": "tipo de plano (close-up/medium/wide shot)",
          "emotional_state": "estado emocional espec√≠fico del personaje",
          "lighting_mood": "tipo de iluminaci√≥n apropiada"
        }
      ]
    }
  ],
  "visual_style": "estilo visual sugerido",
  "consistency_notes": "elementos clave para mantener consistencia visual entre escenas"
}

EJEMPLOS DE SCENE_DESCRIPTION VARIADAS:
- "Luna, white hen with bright red comb and small black eyes, looking desperately worried in close-up, searching frantically around empty wooden chicken coop, morning sunlight casting long shadows"
- "Luna, white hen with bright red comb and small black eyes, in medium shot talking emotionally to pink pig Max near rustic wooden fence, tears visible in eyes, soft golden afternoon light"
- "Luna, white hen with bright red comb and small black eyes, wide shot walking courageously through dark mysterious forest with pink pig companion, dramatic low-angle view, filtered sunlight through trees"

IMPORTANTE: Cada scene_description debe ser VISUALMENTE DISTINTA con diferentes composiciones, √°ngulos y ambientes."""

        user_message = f"""Analiza el siguiente {content_type} momento a momento y extrae informaci√≥n detallada sobre personajes:

CONTENIDO COMPLETO:
{text_content}

INSTRUCCIONES ESPEC√çFICAS:
1. Lee todo el relato/cuento completo
2. Identifica los momentos narrativos clave donde cada personaje tiene una acci√≥n/emoci√≥n espec√≠fica
3. Para cada momento, crea una escena visualmente √öNICA con descripci√≥n completa
4. Aseg√∫rate de que cada scene_description tenga:
   - Caracter√≠sticas f√≠sicas espec√≠ficas del personaje
   - Acci√≥n/pose diferente
   - Emoci√≥n visible apropiada al momento
   - Composici√≥n de c√°mara variada
   - Ambiente/iluminaci√≥n acorde a la narrativa

OBJETIVO: Generar 3-5 escenas por personaje que cuenten la historia visualmente con M√ÅXIMA VARIEDAD pero manteniendo la consistencia del personaje.

Responde √öNICAMENTE con el JSON solicitado."""

        data = {
            "model": model,
            "max_tokens": 3000,  # Aumentado para an√°lisis m√°s detallado
            "temperature": 0.4,  # Ligeramente m√°s creativo
            "system": system_prompt,
            "messages": [
                {"role": "user", "content": user_message}
            ]
        }
        
        response = requests.post(
            "https://api.anthropic.com/v1/messages",
            headers=headers,
            json=data,
            timeout=90
        )
        
        if response.status_code == 200:
            response_data = response.json()
            claude_response = response_data["content"][0]["text"].strip()
            
            # Limpiar respuesta de Claude (quitar markdown si existe)
            if claude_response.startswith("```json"):
                claude_response = claude_response.replace("```json", "").replace("```", "").strip()
            
            # Parsear JSON
            try:
                character_data = json.loads(claude_response)
                
                # Validar que se generaron escenas variadas
                if character_data.get("has_characters", False):
                    total_scenes = sum(len(char.get("suggested_scenes", [])) for char in character_data.get("characters", []))
                    if total_scenes > 0:
                        st.success(f"‚úÖ Claude gener√≥ {total_scenes} escenas variadas para la secuencia")
                
                return character_data
            except json.JSONDecodeError as e:
                st.error(f"Error parseando an√°lisis de personajes: {e}")
                st.error(f"Respuesta de Claude: {claude_response[:500]}...")
                return {"has_characters": False, "characters": []}
        else:
            st.error(f"Error en an√°lisis de personajes: {response.status_code}")
            return {"has_characters": False, "characters": []}
            
    except Exception as e:
        st.error(f"Error analizando personajes: {str(e)}")
        return {"has_characters": False, "characters": []}

def generate_character_seed(character_name: str, scene_action: str = "") -> int:
    """
    Genera un seed consistente basado en el personaje con variaci√≥n controlada por escena
    
    Args:
        character_name: Nombre del personaje (para consistencia base)
        scene_action: Acci√≥n espec√≠fica de la escena (para variaci√≥n)
    
    Returns:
        Seed que mantiene consistencia del personaje pero permite variaci√≥n visual
    """
    import hashlib
    
    # Seed base del personaje (siempre igual para el mismo personaje)
    base_hash = hashlib.md5(character_name.encode()).hexdigest()
    base_seed = int(base_hash[:6], 16) % 50000
    
    # Variaci√≥n sutil por escena (si se proporciona)
    if scene_action and scene_action.strip():
        scene_hash = hashlib.md5(scene_action.encode()).hexdigest()
        scene_variation = int(scene_hash[:3], 16) % 1000
        
        # Combinar: mantener consistencia del personaje + a√±adir variaci√≥n de escena
        final_seed = base_seed + scene_variation
    else:
        # Si no hay acci√≥n espec√≠fica, usar solo el seed base del personaje
        final_seed = base_seed
    
    # Asegurar que el seed est√© en rango v√°lido
    return final_seed % 100000

def create_character_prompt(character: Dict, scene: Dict, style: str = "photorealistic") -> str:
    """Crea un prompt optimizado para Flux combinando personaje + escena"""
    base_character = character["physical_description"]
    scene_description = scene["scene_description"]
    
    # Plantilla base para prompts consistentes
    prompt_template = f"{base_character}, {scene_description}"
    
    # A√±adir estilo y calidad
    style_suffix = {
        "photorealistic": "photorealistic, high quality, detailed, professional photography",
        "digital-art": "digital art, high quality, artistic, professional illustration",
        "cinematic": "cinematic composition, dramatic lighting, film photography",
        "documentary": "documentary style, natural lighting, authentic photography",
        "portrait": "portrait photography, professional lighting, high quality"
    }
    
    final_prompt = f"{prompt_template}, {style_suffix.get(style, style_suffix['photorealistic'])}"
    
    return final_prompt
# Funci√≥n para generar texto con Claude Sonnet 4
def generate_text_claude(prompt: str, content_type: str, api_key: str, model: str, max_tokens: int) -> Optional[str]:
    """Genera contenido de texto usando Claude Sonnet 4 de Anthropic"""
    try:
        headers = {
            "x-api-key": api_key,
            "Content-Type": "application/json",
            "anthropic-version": "2023-06-01"
        }
        
        # Prompts espec√≠ficos y mejorados para Claude (AMPLIADOS)
        system_prompts = {
            "ejercicio": """Eres un experto educador con amplia experiencia pedag√≥gica. Tu tarea es crear ejercicios educativos que sean:
- Estructurados y progresivos
- Adaptados al nivel apropiado
- Incluyan explicaciones claras
- Contengan ejemplos pr√°cticos
- Fomenten el pensamiento cr√≠tico
Formato: T√≠tulo, objetivos, desarrollo paso a paso, ejercicios pr√°cticos y evaluaci√≥n.""",
            
            "art√≠culo": """Eres un periodista y escritor especializado en crear art√≠culos informativos de alta calidad. Tu contenido debe ser:
- Bien investigado y fundamentado
- Estructurado con introducci√≥n, desarrollo y conclusi√≥n
- Objetivo y equilibrado
- Accesible para el p√∫blico general
- Incluir datos relevantes y contexto necesario
Formato: Titular atractivo, lead informativo, desarrollo en secciones y conclusi√≥n impactante.""",
            
            "texto": """Eres un escritor creativo vers√°til. Tu objetivo es crear textos que sean:
- Originales y creativos
- Bien estructurados y fluidos
- Adaptados al prop√≥sito espec√≠fico
- Engaging y memorable
- Con estilo apropiado para el contenido
Formato: Libre, adaptado al tipo de texto solicitado.""",
            
            "relato": """Eres un narrador experto en storytelling. Tus relatos deben incluir:
- Desarrollo s√≥lido de personajes
- Trama envolvente con conflicto y resoluci√≥n
- Ambientaci√≥n vivida y detallada
- Di√°logos naturales y efectivos
- Ritmo narrativo apropiado
- Final satisfactorio
Formato: Estructura narrativa cl√°sica con introducci√≥n, desarrollo, cl√≠max y desenlace.""",
            
            "di√°logo situacional": """Eres un experto en creaci√≥n de contenido educativo para idiomas. Tu tarea es crear di√°logos situacionales que sean:
- Naturales y aut√©nticos
- Apropiados para el contexto
- Con vocabulario cotidiano √∫til
- Breves pero completos (6-10 l√≠neas)
- Incluyan expresiones idiom√°ticas comunes
Formato: Di√°logo breve + lista de 5-7 expresiones clave con explicaci√≥n.""",
            
            "art√≠culo cultural": """Eres un escritor especializado en divulgaci√≥n cultural. Tu contenido debe ser:
- Informativo y atractivo (120-150 palabras)
- Claro y accesible
- Con ejemplos concretos
- Que despierte inter√©s cultural
- Educativo pero entretenido
Formato: Art√≠culo divulgativo + glosario de 5 palabras clave.""",
            
            "art√≠culo de actualidad": """Eres un periodista especializado en adaptar noticias para diferentes audiencias. Tu contenido debe ser:
- Claro y directo (80-120 palabras)
- Con lenguaje sencillo
- Bien estructurado
- Objetivo y factual
- F√°cil de comprender
Formato: Noticia simplificada + 2-3 preguntas de comprensi√≥n.""",
            
            "art√≠culo biogr√°fico": """Eres un bi√≥grafo especializado en crear perfiles concisos. Tu contenido debe incluir:
- Informaci√≥n esencial (100-120 palabras)
- Fechas y logros clave
- Relevancia cultural o hist√≥rica
- Datos verificables
- Un elemento curioso o interesante
Formato: Mini-biograf√≠a + dato curioso final.""",
            
            "clip de noticias": """Eres un editor de noticias especializado en contenido ultrabreve. Tu tarea es crear:
- Textos muy concisos (40-60 palabras por noticia)
- Informaci√≥n directa y clara
- Vocabulario comprensible
- Estilo telegr√°fico pero completo
- 5 noticias por tema
Formato: 5 clips de noticias + frase resumen simple.""",
            
            "pregunta de debate": """Eres un moderador experto en generar debates constructivos. Tu contenido debe:
- Plantear dilemas interesantes
- Ser breve pero provocativo (2-3 frases)
- Usar lenguaje sencillo
- Estimular m√∫ltiples perspectivas
- Terminar con pregunta abierta
Formato: Introducci√≥n del tema + pregunta de debate abierta.""",
            
            "receta de cocina": """Eres un chef educador especializado en recetas sencillas. Tu contenido debe incluir:
- Instrucciones claras (80-100 palabras)
- Lista de ingredientes espec√≠fica
- Pasos en imperativo
- T√©cnicas b√°sicas explicadas
- Consejos √∫tiles
Formato: Lista de ingredientes + 3-4 pasos de preparaci√≥n.""",
            
            "post de redes sociales": """Eres un community manager especializado en contenido educativo para redes. Tu contenido debe ser:
- Muy breve (40-60 palabras)
- Tono informal y cercano
- Incluir emojis apropiados
- 1-2 hashtags relevantes
- Lenguaje coloquial aut√©ntico
Formato: Post informal + traducci√≥n de expresiones coloquiales.""",
            
            "trivia cultural": """Eres un creador de contenido educativo especializado en preguntas de cultura general. Tu contenido debe incluir:
- 6 preguntas de opci√≥n m√∫ltiple
- 4 opciones (A-D) por pregunta
- Respuesta correcta marcada
- Explicaci√≥n breve de cada respuesta
- Nivel apropiado de dificultad
Formato: Bater√≠a de preguntas + explicaciones de respuestas correctas."""
        }
        
        # Instrucciones espec√≠ficas seg√∫n el tipo de contenido
        def get_content_specific_instructions(content_type):
            instructions = {
                "ejercicio": "Crea un ejercicio educativo completo con estructura clara.",
                
                "art√≠culo": "Redacta un art√≠culo informativo completo y bien estructurado.",
                
                "texto": "Crea un texto apropiado para el tema y prop√≥sito indicado.",
                
                "relato": "Escribe un relato completo con estructura narrativa cl√°sica.",
                
                "di√°logo situacional": """Escribe un di√°logo breve (6‚Äì10 l√≠neas) entre dos personajes en el contexto indicado. Incluye expresiones naturales del idioma, vocabulario cotidiano y un tono realista. A√±ade debajo una lista con 5‚Äì7 expresiones clave con traducci√≥n sencilla.""",
                
                "art√≠culo cultural": """Redacta un art√≠culo cultural de 120‚Äì150 palabras sobre el tema indicado. Usa un estilo divulgativo, frases cortas y vocabulario accesible. A√±ade un peque√±o glosario de 5 palabras con definici√≥n sencilla.""",
                
                "art√≠culo de actualidad": """Escribe un art√≠culo breve de actualidad de 80‚Äì120 palabras sobre el tema/noticia indicada. Usa un estilo sencillo y claro. A√±ade 2‚Äì3 preguntas de comprensi√≥n al final.""",
                
                "art√≠culo biogr√°fico": """Crea una biograf√≠a breve de 100‚Äì120 palabras sobre la persona indicada. Incluye 3‚Äì4 hechos clave (fechas, logros, importancia). A√±ade una l√≠nea final con 'Dato curioso'.""",
                
                "clip de noticias": """Escribe un clip de 5 noticias en 40‚Äì60 palabras cada una sobre el tema indicado. Debe ser directo, claro y con vocabulario comprensible. A√±ade una frase con la idea principal en lenguaje a√∫n m√°s simple.""",
                
                "pregunta de debate": """Plantea una pregunta de debate en 2‚Äì3 frases sobre el tema indicado. El texto debe introducir la situaci√≥n brevemente y terminar con una pregunta abierta. Nivel de idioma sencillo, para fomentar conversaci√≥n.""",
                
                "receta de cocina": """Escribe una receta breve de 80‚Äì100 palabras sobre c√≥mo preparar el plato indicado. Incluye una lista corta de ingredientes y 3‚Äì4 pasos en imperativo (ej.: corta, mezcla, a√±ade).""",
                
                "post de redes sociales": """Crea un post de redes sociales de 40‚Äì60 palabras sobre el tema indicado. Usa tono informal, emojis y 1‚Äì2 hashtags. A√±ade debajo la traducci√≥n literal de 3 expresiones coloquiales que aparezcan.""",
                
                "trivia cultural": """Escribe una bater√≠a de 6 preguntas de trivial cultural sobre el tema indicado. Ofrece 4 opciones (A‚ÄìD) y marca la correcta. A√±ade una explicaci√≥n breve (1 frase) de por qu√© la respuesta es la correcta."""
            }
            return instructions.get(content_type, instructions["texto"])
        
        user_message = f"""Crea un {content_type} sobre: {prompt}

{get_content_specific_instructions(content_type)}

Por favor, aseg√∫rate de que el contenido sea:
1. Completo y bien desarrollado seg√∫n las especificaciones
2. Apropiado para el tipo de contenido solicitado
3. Interesante y bien escrito
4. Listo para ser presentado como contenido final

El {content_type} debe seguir exactamente el formato y extensi√≥n indicados."""
        
        data = {
            "model": model,
            "max_tokens": max_tokens,
            "temperature": 0.7,
            "system": system_prompts.get(content_type, system_prompts["texto"]),
            "messages": [
                {"role": "user", "content": user_message}
            ]
        }
        
        response = requests.post(
            "https://api.anthropic.com/v1/messages",
            headers=headers,
            json=data,
            timeout=120
        )
        
        if response.status_code == 200:
            response_data = response.json()
            return response_data["content"][0]["text"]
        else:
            st.error(f"Error generando texto con Claude: {response.status_code} - {response.text}")
            return None
            
    except Exception as e:
        st.error(f"Error en la generaci√≥n de texto con Claude: {str(e)}")
        return None

# Nueva funci√≥n para generar prompt visual con Claude
def generate_visual_prompt_with_claude(text_content: str, content_type: str, style: str, api_key: str, model: str) -> Optional[str]:
    """Genera un prompt visual optimizado usando Claude basado en el contenido generado"""
    try:
        headers = {
            "x-api-key": api_key,
            "Content-Type": "application/json",
            "anthropic-version": "2023-06-01"
        }
        
        # System prompt especializado para generaci√≥n de prompts visuales
        system_prompt = """Eres un experto en generaci√≥n de prompts para modelos de AI de im√°genes, espec√≠ficamente para Flux. Tu tarea es analizar contenido de texto y crear prompts visuales optimizados en ingl√©s.

REGLAS IMPORTANTES:
1. El prompt DEBE estar en ingl√©s perfecto
2. Debe ser espec√≠fico y descriptivo visualmente
3. Incluir t√©rminos t√©cnicos de fotograf√≠a/arte cuando sea apropiado
4. Adaptar al estilo solicitado
5. Ser conciso pero detallado (m√°ximo 150 palabras)
6. NO reproducir texto del contenido, solo elementos visuales

ESTRUCTURA DEL PROMPT:
[Descripci√≥n visual principal] + [Estilo t√©cnico] + [Calidad/Resoluci√≥n] + [Elementos compositivos]"""
# Instrucciones espec√≠ficas por tipo de contenido (AMPLIADAS)
        content_instructions = {
            "ejercicio": """Analiza este ejercicio educativo y crea un prompt visual que represente:
- La materia/tema principal del ejercicio
- Un ambiente educativo apropiado (aula, laboratorio, biblioteca, etc.)
- Elementos visuales que complementen el aprendizaje
- Personas estudiando o practicando el tema si es relevante
- Materiales educativos relacionados

Evita incluir texto espec√≠fico del ejercicio, solo elementos visuales educativos.""",
            
            "art√≠culo": """Analiza este art√≠culo y crea un prompt visual que represente:
- El tema central o concepto principal
- Elementos que ilustren la informaci√≥n clave
- Un contexto visual apropiado para el tema
- Objetos, personas o lugares relevantes al contenido
- Una composici√≥n que transmita el mensaje principal

Evita texto espec√≠fico, enf√≥cate en elementos visuales informativos.""",
            
            "texto": """Analiza este texto y crea un prompt visual que capture:
- El tema o concepto principal
- El tono y ambiente del contenido
- Elementos visuales que complementen el mensaje
- Una composici√≥n apropiada para el prop√≥sito del texto
- Elementos que refuercen visualmente la idea principal

Enf√≥cate en la esencia visual del contenido.""",
            
            "relato": """Analiza este relato y crea un prompt visual que capture:
- La escena m√°s representativa o impactante
- Los personajes principales (sin nombres espec√≠ficos)
- La ambientaci√≥n y √©poca de la historia
- El mood/atm√≥sfera del relato
- Elementos narrativos clave visualmente

Crea una escena cinematogr√°fica que represente el relato.""",
            
            "di√°logo situacional": """Analiza este di√°logo situacional y crea un prompt visual que muestre:
- El contexto/lugar donde ocurre la conversaci√≥n
- Dos personas conversando de manera natural
- El ambiente apropiado (cafeter√≠a, aeropuerto, oficina, etc.)
- Elementos que refuercen el contexto situacional
- Una escena realista y cotidiana

Representa visualmente la situaci√≥n del di√°logo.""",
            
            "art√≠culo cultural": """Analiza este art√≠culo cultural y crea un prompt visual que represente:
- La tradici√≥n, costumbre o elemento cultural principal
- Escenas t√≠picas relacionadas con la cultura descrita
- Personas participando en actividades culturales
- Elementos visuales representativos (objetos, lugares, vestimentas)
- Un ambiente que refleje la identidad cultural

Captura la esencia visual de la cultura descrita.""",
            
            "art√≠culo de actualidad": """Analiza este art√≠culo de actualidad y crea un prompt visual que muestre:
- El tema principal de la noticia
- Elementos visuales que ilustren la informaci√≥n
- Un contexto actual y contempor√°neo
- Personas, lugares u objetos relacionados con la noticia
- Una composici√≥n informativa y clara

Representa visualmente el contenido noticioso.""",
            
            "art√≠culo biogr√°fico": """Analiza este art√≠culo biogr√°fico y crea un prompt visual que incluya:
- Un retrato o representaci√≥n de la √©poca de la persona
- Elementos relacionados con sus logros principales
- El contexto hist√≥rico o profesional relevante
- Objetos o s√≠mbolos asociados con su trabajo/vida
- Una composici√≥n que honre su legado

Crea una representaci√≥n visual dignificante del personaje.""",
            
            "clip de noticias": """Analiza estos clips de noticias y crea un prompt visual que muestre:
- Una composici√≥n estilo noticiero o medio de comunicaci√≥n
- Elementos gr√°ficos informativos modernos
- Un ambiente de sala de redacci√≥n o estudio de noticias
- Personas trabajando en medios de comunicaci√≥n
- Una est√©tica profesional y contempor√°nea

Representa el mundo del periodismo y las noticias.""",
            
            "pregunta de debate": """Analiza esta pregunta de debate y crea un prompt visual que represente:
- Personas en situaci√≥n de di√°logo o debate
- Un ambiente apropiado para la discusi√≥n (aula, mesa redonda, etc.)
- Elementos que sugieran intercambio de ideas
- Una composici√≥n que invite al di√°logo
- Diversidad de perspectivas visuales

Crea una escena que fomente la conversaci√≥n.""",
            
            "receta de cocina": """Analiza esta receta y crea un prompt visual que muestre:
- Los ingredientes principales de la receta
- Una cocina acogedora y bien equipada
- El proceso de cocinar o el plato terminado
- Utensilios de cocina apropiados
- Una presentaci√≥n apetitosa y profesional

Representa visualmente la experiencia culinaria.""",
            
            "post de redes sociales": """Analiza este post y crea un prompt visual que capture:
- El estilo visual t√≠pico de redes sociales
- Elementos modernos y contempor√°neos
- Una est√©tica atractiva y "instagrameable"
- Personas usando dispositivos m√≥viles o en situaciones sociales
- Colores vibrantes y composici√≥n din√°mica

Crea una imagen perfecta para redes sociales.""",
            
            "trivia cultural": """Analiza esta trivia cultural y crea un prompt visual que represente:
- Un ambiente de quiz o juego educativo
- Elementos relacionados con el tema de las preguntas
- Personas participando en actividades de conocimiento
- Libros, mapas, o s√≠mbolos culturales relevantes
- Una composici√≥n educativa y atractiva

Representa el mundo del conocimiento y la cultura general."""
        }
        
        # Adaptaciones por estilo visual
        style_adaptations = {
            "photorealistic": "Como una fotograf√≠a profesional realista, con iluminaci√≥n natural, alta definici√≥n, composici√≥n fotogr√°fica, detalles n√≠tidos",
            "digital-art": "Como arte digital de alta calidad, colores vibrantes, composici√≥n art√≠stica, estilo ilustrativo moderno, dise√±o profesional",
            "cinematic": "Con composici√≥n cinematogr√°fica, iluminaci√≥n dram√°tica, profundidad de campo, ambiente de pel√≠cula, producci√≥n de alta calidad",
            "documentary": "Estilo documental aut√©ntico, fotograf√≠a candida, iluminaci√≥n natural, ambiente real, calidad period√≠stica",
            "portrait": "Enfoque retrato profesional, iluminaci√≥n de estudio, composici√≥n centrada en personas, calidad profesional"
        }
        
        user_message = f"""CONTENIDO A ANALIZAR:
{text_content}

TIPO DE CONTENIDO: {content_type}
ESTILO DESEADO: {style}

{content_instructions.get(content_type, content_instructions["texto"])}

INSTRUCCIONES ADICIONALES PARA EL ESTILO:
{style_adaptations.get(style, style_adaptations["photorealistic"])}

Por favor, responde √öNICAMENTE con el prompt visual en ingl√©s optimizado para Flux, sin explicaciones adicionales."""
        
        data = {
            "model": model,
            "max_tokens": 200,
            "temperature": 0.3,  # Menos temperatura para m√°s consistencia
            "system": system_prompt,
            "messages": [
                {"role": "user", "content": user_message}
            ]
        }
        
        response = requests.post(
            "https://api.anthropic.com/v1/messages",
            headers=headers,
            json=data,
            timeout=60
        )
        
        if response.status_code == 200:
            response_data = response.json()
            visual_prompt = response_data["content"][0]["text"].strip()
            return visual_prompt
        else:
            st.error(f"Error generando prompt visual con Claude: {response.status_code} - {response.text}")
            return None
            
    except Exception as e:
        st.error(f"Error en la generaci√≥n de prompt visual con Claude: {str(e)}")
        return None

# Funci√≥n para optimizar prompt para Flux (ahora simplificada ya que Claude genera el prompt completo)
def optimize_prompt_for_flux(prompt, style="photorealistic"):
    """Aplica optimizaciones finales al prompt ya generado por Claude"""
    try:
        # Agregar t√©rminos t√©cnicos finales si no est√°n presentes
        quality_terms = "high quality, detailed, professional"
        resolution_terms = "8K resolution, sharp focus"
        
        # Verificar si ya contiene t√©rminos de calidad
        prompt_lower = prompt.lower()
        if not any(term in prompt_lower for term in ["high quality", "8k", "detailed", "professional", "masterpiece"]):
            prompt += f", {quality_terms}, {resolution_terms}"
        
        return prompt
    except Exception as e:
        st.error(f"Error optimizando prompt: {str(e)}")
        return prompt

# Funci√≥n para generar imagen con Flux Pro (basada en el archivo de referencia)
def generate_image_flux_pro(prompt, width, height, steps, api_key, seed=None):
    """Genera imagen usando Flux Pro 1.1"""
    headers = {
        'accept': 'application/json',
        'x-key': api_key,
        'Content-Type': 'application/json',
    }
    
    json_data = {
        'prompt': prompt,
        'width': int(width),
        'height': int(height),
        'steps': int(steps),
        'prompt_upsampling': False,
        'seed': seed if seed is not None else 42,  # Usar seed proporcionado o default
        'guidance': 2.5,
        'safety_tolerance': 2,
        'interval': 2,
        'output_format': 'jpeg'
    }
    
    response = requests.post(
        'https://api.bfl.ml/v1/flux-pro-1.1',
        headers=headers,
        json=json_data,
    )
    
    return process_flux_response(response, api_key)

# Funci√≥n para generar imagen con Flux Ultra (basada en el archivo de referencia)  
def generate_image_flux_ultra(prompt, aspect_ratio, api_key, seed=None):
    """Genera imagen usando Flux Pro 1.1 Ultra"""
    headers = {
        'accept': 'application/json',
        'x-key': api_key,
        'Content-Type': 'application/json',
    }
    
    json_data = {
        'prompt': prompt,
        'seed': seed if seed is not None else 42,  # Usar seed proporcionado o default
        'aspect_ratio': aspect_ratio,
        'safety_tolerance': 2,
        'output_format': 'jpeg',
        'raw': False
    }
    
    response = requests.post(
        'https://api.bfl.ml/v1/flux-pro-1.1-ultra',
        headers=headers,
        json=json_data,
    )
    
    return process_flux_response(response, api_key)

# Funci√≥n para procesar respuesta de Flux (basada en el archivo de referencia)
def process_flux_response(response, api_key):
    """Procesa la respuesta de Flux y hace polling hasta obtener la imagen"""
    if response.status_code != 200:
        return f"Error: {response.status_code} {response.text}"
    
    request = response.json()
    request_id = request.get("id")
    if not request_id:
        return "No se pudo obtener el ID de la solicitud."

    with st.spinner('Generando imagen con Flux...'):
        max_attempts = 60  # 5 minutos m√°ximo
        for attempt in range(max_attempts):
            time.sleep(5)  # Esperar 5 segundos entre consultas
            
            result_response = requests.get(
                'https://api.bfl.ml/v1/get_result',
                headers={
                    'accept': 'application/json',
                    'x-key': api_key,
                },
                params={
                    'id': request_id,
                },
            )
            
            if result_response.status_code != 200:
                return f"Error: {result_response.status_code} {result_response.text}"
            
            result = result_response.json()
            status = result.get("status")
            
            if status == "Ready":
                image_url = result['result'].get('sample')
                if not image_url:
                    return "No se encontr√≥ URL de imagen en el resultado."
                
                image_response = requests.get(image_url)
                if image_response.status_code != 200:
                    return f"Error al obtener la imagen: {image_response.status_code}"
                
                image = Image.open(BytesIO(image_response.content))
                jpg_image = image.convert("RGB")
                return jpg_image
                
            elif status == "Failed":
                return "La generaci√≥n de la imagen fall√≥."
            elif status == "Pending":
                # Mostrar progreso
                st.info(f"Procesando... Intento {attempt + 1}/{max_attempts}")
                pass
            else:
                return f"Estado inesperado: {status}"
        
        return "Timeout: La generaci√≥n tom√≥ demasiado tiempo."
# Funci√≥n principal para generar imagen con Flux (MEJORADA CON SOPORTE PARA SECUENCIAS)
def generate_image_flux(text_content: str, content_type: str, api_key: str, model: str, width: int, height: int, steps: int, style: str = "photorealistic", custom_prompt: str = None, claude_api_key: str = None, claude_model: str = None, character_seed: int = None) -> tuple[Optional[Image.Image], str]:
    """Genera imagen usando Flux con prompt inteligente generado por Claude"""
    try:
        # Determinar qu√© prompt usar
        if custom_prompt and custom_prompt.strip():
            # Usar el prompt personalizado del usuario (ya en ingl√©s)
            visual_prompt = custom_prompt.strip()
            final_prompt = optimize_prompt_for_flux(visual_prompt, style)
            st.info(f"üé® Usando prompt personalizado para la imagen")
            prompt_source = "personalizado"
        else:
            # Generar prompt autom√°ticamente usando Claude
            st.info(f"ü§ñ Analizando contenido con Claude para generar prompt visual...")
            
            if not claude_api_key:
                # Fallback al m√©todo anterior si no hay API de Claude
                content_preview = ' '.join(text_content.split()[:80])
                visual_prompt = f"A realistic scene representing: {content_preview}. Real world setting, natural environment, authentic details"
                st.warning("‚ö†Ô∏è Usando m√©todo b√°sico (falta Claude API key para an√°lisis inteligente)")
                prompt_source = "b√°sico"
            else:
                # Usar Claude para generar prompt inteligente
                visual_prompt = generate_visual_prompt_with_claude(
                    text_content, content_type, style, claude_api_key, claude_model
                )
                
                if visual_prompt:
                    st.success(f"‚úÖ Claude analiz√≥ el {content_type} y gener√≥ prompt visual optimizado")
                    prompt_source = "inteligente"
                else:
                    # Fallback si Claude falla
                    content_preview = ' '.join(text_content.split()[:80])
                    visual_prompt = f"A realistic scene representing: {content_preview}. Real world setting, natural environment, authentic details"
                    st.warning("‚ö†Ô∏è Usando m√©todo b√°sico (error en an√°lisis de Claude)")
                    prompt_source = "b√°sico"
            
            final_prompt = optimize_prompt_for_flux(visual_prompt, style)
        
        # Mostrar informaci√≥n del prompt generado
        with st.expander(f"üîç Prompt generado ({prompt_source})"):
            st.code(final_prompt, language="text")
            if prompt_source == "inteligente":
                st.success("üß† Prompt generado por Claude analizando todo el contenido")
            elif prompt_source == "personalizado":
                st.info("üë§ Prompt personalizado proporcionado por el usuario")
            else:
                st.warning("‚öôÔ∏è Prompt b√°sico (primeras palabras del contenido)")
        
        # Generar imagen seg√∫n el modelo con seed opcional
        if model == "flux-pro-1.1-ultra":
            # Usar Ultra con aspect ratio
            aspect_ratio = f"{width}:{height}" if width == height else "16:9"
            result = generate_image_flux_ultra(final_prompt, aspect_ratio, api_key, character_seed)
        else:
            # Usar Pro normal
            result = generate_image_flux_pro(final_prompt, width, height, steps, api_key, character_seed)
        
        if isinstance(result, Image.Image):
            return result, final_prompt
        else:
            st.error(f"Error en Flux: {result}")
            return None, final_prompt
            
    except Exception as e:
        st.error(f"Error en la generaci√≥n de imagen con Flux: {str(e)}")
        import traceback
        st.error(f"Traceback: {traceback.format_exc()}")
        return None, ""

# NUEVA FUNCI√ìN: Generar secuencia de im√°genes con personajes consistentes
def generate_character_sequence(text_content: str, content_type: str, character_analysis: Dict[str, Any], flux_config: Dict[str, Any]) -> Dict[str, Any]:
    """Genera m√∫ltiples im√°genes con personajes consistentes usando seeds variables por escena"""
    
    sequence_results = {
        "success": True,
        "character_cards": [],
        "total_images": 0,
        "errors": []
    }
    
    st.info("üé≠ Iniciando generaci√≥n de secuencia de personajes...")
    
    # Crear progress bar para toda la secuencia
    total_scenes = sum(len(char["suggested_scenes"]) for char in character_analysis["characters"])
    progress_bar = st.progress(0)
    scene_counter = 0
    
    for i, character in enumerate(character_analysis["characters"]):
        st.subheader(f"üë§ Personaje {i+1}: {character['name']}")
        
        # Generar seed base para este personaje (sin escena espec√≠fica)
        base_character_seed = generate_character_seed(character["name"])
        
        # Informaci√≥n del personaje
        with st.expander(f"üìã Character Card: {character['name']}"):
            st.write(f"**Tipo:** {character['type']}")
            st.write(f"**Descripci√≥n:** {character['physical_description']}")
            st.write(f"**Caracter√≠sticas clave:** {', '.join(character['key_features'])}")
            st.write(f"**Seed base:** {base_character_seed}")
        
        character_card = {
            "name": character["name"],
            "type": character["type"],
            "description": character["physical_description"],
            "seed": base_character_seed,  # Seed base para referencia
            "images": []
        }
        
        # Generar imagen para cada escena del personaje
        for j, scene in enumerate(character["suggested_scenes"]):
            scene_counter += 1
            progress_bar.progress(scene_counter / total_scenes)
            
            st.write(f"üé¨ Escena {j+1}: {scene['action']}")
            
            # Generar seed espec√≠fico para esta escena
            character_seed = generate_character_seed(character["name"])
            
            # Crear prompt espec√≠fico para esta escena
            scene_prompt = create_character_prompt(character, scene, flux_config["style"])
            
            # Mostrar el prompt que se va a usar
            with st.expander(f"üìù Prompt para {scene['action']} (Seed: {character_seed})"):
                st.code(scene_prompt, language="text")
            
            # Generar imagen con seed espec√≠fico de la escena
            try:
                if flux_config["model"] == "flux-pro-1.1-ultra":
                    aspect_ratio = f"{flux_config['width']}:{flux_config['height']}" if flux_config['width'] == flux_config['height'] else "16:9"
                    image_result = generate_image_flux_ultra(scene_prompt, aspect_ratio, flux_config["api_key"], character_seed)
                else:
                    image_result = generate_image_flux_pro(
                        scene_prompt, 
                        flux_config["width"], 
                        flux_config["height"], 
                        flux_config["steps"], 
                        flux_config["api_key"], 
                        character_seed
                    )
                
                if isinstance(image_result, Image.Image):
                    # Guardar imagen en session state
                    img_buffer = io.BytesIO()
                    image_result.save(img_buffer, format="PNG", quality=95)
                    img_bytes = img_buffer.getvalue()
                    
                    # Metadata de la imagen
                    image_data = {
                        "scene": scene["action"],
                        "prompt": scene_prompt,
                        "seed": character_seed,  # Usar el seed espec√≠fico de la escena
                        "image_bytes": img_bytes,
                        "image_obj": image_result,
                        "timestamp": int(time.time()),
                        "character_name": character["name"]
                    }
                    
                    character_card["images"].append(image_data)
                    sequence_results["total_images"] += 1
                    
                    # Mostrar imagen generada
                    st.image(image_result, caption=f"{character['name']} - {scene['action']}")
                    st.success(f"‚úÖ Imagen generada con seed {character_seed}")
                    
                else:
                    error_msg = f"Error generando imagen para {character['name']} - {scene['action']}: {image_result}"
                    st.error(error_msg)
                    sequence_results["errors"].append(error_msg)
                    
            except Exception as e:
                error_msg = f"Excepci√≥n generando imagen para {character['name']} - {scene['action']}: {str(e)}"
                st.error(error_msg)
                sequence_results["errors"].append(error_msg)
        
        sequence_results["character_cards"].append(character_card)
    
    progress_bar.progress(1.0)
    
    if sequence_results["total_images"] > 0:
        st.success(f"üéâ Secuencia completada: {sequence_results['total_images']} im√°genes generadas")
        
        # Mostrar resumen por personaje
        for card in sequence_results["character_cards"]:
            if card["images"]:
                st.write(f"**{card['name']}**: {len(card['images'])} im√°genes con seed {card['seed']}")
    else:
        st.error("‚ùå No se pudo generar ninguna imagen de la secuencia")
        sequence_results["success"] = False
    
    return sequence_results

# Funci√≥n para generar audio con OpenAI TTS (mantenemos la misma)
def generate_audio(text: str, voice: str, api_key: str) -> Optional[bytes]:
    """Genera audio usando OpenAI Text-to-Speech"""
    try:
        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }
        
        # Limpiar y preparar el texto para TTS
        clean_text = text.replace('\n\n', '. ').replace('\n', ' ').strip()
        if len(clean_text) > 4000:
            clean_text = clean_text[:4000] + "..."
        
        data = {
            "model": "tts-1-hd",  # Usar el modelo HD para mejor calidad
            "input": clean_text,
            "voice": voice,
            "response_format": "mp3"
        }
        
        response = requests.post(
            "https://api.openai.com/v1/audio/speech",
            headers=headers,
            json=data,
            timeout=120
        )
        
        if response.status_code == 200:
            return response.content
        else:
            st.error(f"Error generando audio: {response.status_code} - {response.text}")
            return None
            
    except Exception as e:
        st.error(f"Error en la generaci√≥n de audio: {str(e)}")
        return None
# ===== INTERFAZ PRINCIPAL CON COLUMNAS CORREGIDAS =====
# Crear las columnas PRIMERO, antes de definir el contenido
col1, col2 = st.columns([2, 1])

# ===== COLUMNA DERECHA (col2) - MOVER ARRIBA PARA ALINEAR =====
with col2:
    st.header("üöÄ Generaci√≥n")
    
    # Informaci√≥n del modelo mejorada
    st.info(f"üß† **Claude**: {claude_model}\n\nüé® **Flux**: {flux_model}\n\nüó£Ô∏è **Voz**: {voice_model}")
    
    # Informaci√≥n sobre el sistema de prompts
    st.success("üî¨ **Sistema Inteligente:**\n\nClaude analiza todo tu contenido para generar prompts visuales perfectamente adaptados")
    
    # NUEVO: Informaci√≥n sobre secuencias de personajes
    if st.session_state.character_sequence_mode:
        st.warning("üé≠ **Modo Secuencia Activo:**\n\nSe generar√°n m√∫ltiples im√°genes con personajes consistentes usando seeds fijos")
        
        # Mostrar an√°lisis de personajes si existe
        if st.session_state.character_analysis:
            with st.expander("üë• Personajes detectados"):
                for i, char in enumerate(st.session_state.character_analysis.get("characters", [])):
                    st.write(f"**{i+1}. {char['name']}** ({char['type']})")
                    st.caption(f"Escenas: {len(char.get('suggested_scenes', []))}")
    
    # Informaci√≥n sobre las nuevas tipolog√≠as
    with st.expander("üÜï Nuevas tipolog√≠as disponibles"):
        st.markdown("""
        **üó£Ô∏è Di√°logos situacionales**: Conversaciones naturales (6-10 l√≠neas)
        
        **üé≠ Art√≠culo cultural**: Tradiciones y costumbres (120-150 palabras)
        
        **üì∫ Art√≠culo de actualidad**: Noticias simplificadas (80-120 palabras)
        
        **üë§ Art√≠culo biogr√°fico**: Mini-biograf√≠as (100-120 palabras)
        
        **üì± Clip de noticias**: 5 noticias ultrabreves (40-60 palabras c/u)
        
        **üí≠ Pregunta de debate**: Dilemas para conversaci√≥n (2-3 frases)
        
        **üë®‚Äçüç≥ Receta de cocina**: Recetas sencillas (80-100 palabras)
        
        **üì≤ Post de redes sociales**: Contenido informal (40-60 palabras)
        
        **üß† Trivia cultural**: 6 preguntas de cultura general
        """)
    
    # Bot√≥n principal
    generate_button = st.button(
        "üéØ Generar Contenido Multimedia",
        type="primary",
        use_container_width=True
    )
    
    # NUEVO: Bot√≥n para modo secuencia
    if st.session_state.character_sequence_mode:
        generate_sequence_button = st.button(
            "üé¨ Generar Solo Secuencia de Im√°genes",
            type="secondary",
            use_container_width=True,
            help="Genera solo las im√°genes de personajes (requiere texto ya generado)"
        )
    else:
        generate_sequence_button = False
    
    # Validaci√≥n de APIs
    apis_ready = all([anthropic_api_key, bfl_api_key, openai_api_key])
    if not apis_ready:
        missing_apis = []
        if not anthropic_api_key: missing_apis.append("Anthropic")
        if not bfl_api_key: missing_apis.append("Black Forest Labs")  
        if not openai_api_key: missing_apis.append("OpenAI")
        
        st.warning(f"‚ö†Ô∏è APIs faltantes: {', '.join(missing_apis)}")

# ===== COLUMNA IZQUIERDA (col1) - CONTENIDO PRINCIPAL =====
with col1:
    st.header("üìù Generaci√≥n de Contenido")
    
    # Input del usuario con ejemplos ampliados
    user_prompt = st.text_area(
        "Describe tu idea:",
        placeholder="""Ejemplos por tipo de contenido:

üéì Ejercicio: "Funciones lineales para estudiantes de secundaria"
üì∞ Art√≠culo: "El futuro de la energ√≠a renovable" 
üìö Texto: "Gu√≠a de productividad personal"
üìñ Relato: "Un gato que viaja en el tiempo"

üó£Ô∏è Di√°logo situacional: "Pidiendo direcciones en el aeropuerto"
üé≠ Art√≠culo cultural: "La celebraci√≥n del D√≠a de Muertos en M√©xico"
üì∫ Art√≠culo de actualidad: "Nuevas medidas ambientales aprobadas"
üë§ Art√≠culo biogr√°fico: "Frida Kahlo, pintora mexicana"

üì± Clip de noticias: "Avances tecnol√≥gicos de esta semana"
üí≠ Pregunta de debate: "¬øEs √©tico usar inteligencia artificial en educaci√≥n?"
üë®‚Äçüç≥ Receta de cocina: "C√≥mo hacer tacos al pastor aut√©nticos"
üì≤ Post de redes sociales: "Consejos para ser m√°s sostenible"
üß† Trivia cultural: "Conocimientos sobre arte latinoamericano" """,
        height=150
    )
    
    # Tipo de contenido (AMPLIADO)
    content_type = st.selectbox(
        "Tipo de contenido a generar:",
        ["ejercicio", "art√≠culo", "texto", "relato", "di√°logo situacional", 
         "art√≠culo cultural", "art√≠culo de actualidad", "art√≠culo biogr√°fico", 
         "clip de noticias", "pregunta de debate", "receta de cocina", 
         "post de redes sociales", "trivia cultural"],
        help="Selecciona el tipo que mejor se adapte a tu necesidad"
    )
    
    # Prompt opcional para imagen
    st.subheader("üñºÔ∏è Personalizaci√≥n de Imagen (Opcional)")
    image_prompt = st.text_area(
        "Prompt personalizado para la imagen (en ingl√©s):",
        placeholder="""Opcional: Describe espec√≠ficamente qu√© imagen quieres generar EN INGL√âS.
Si lo dejas vac√≠o, Claude analizar√° el contenido y generar√° autom√°ticamente un prompt optimizado.

Ejemplos:
‚Ä¢ A person studying with mathematics books in a modern library, natural lighting, photorealistic
‚Ä¢ A futuristic landscape with solar panels and wind turbines at sunset, cinematic composition
‚Ä¢ An orange cat wearing a steampunk hat traveling in a time machine, digital art style
‚Ä¢ Two people having a conversation at an airport terminal, documentary style
‚Ä¢ Traditional Day of the Dead altar with colorful decorations, cultural photography
‚Ä¢ A modern newsroom with journalists working, professional lighting""",
        height=120,
        help="Si especificas un prompt EN INGL√âS, este se usar√° en lugar del generado autom√°ticamente por Claude"
    )

# ===== PROCESO DE GENERACI√ìN PRINCIPAL (MEJORADO CON SOPORTE PARA SECUENCIAS) =====
if generate_button and user_prompt:
    if not apis_ready:
        st.error("‚ö† Por favor, proporciona todas las claves de API necesarias.")
    else:
        # Limpiar contenido anterior
        st.session_state.generated_content = {}
        st.session_state.generation_complete = False
        st.session_state.character_analysis = None
        st.session_state.character_images = []
        st.session_state.sequence_generation_complete = False
        
        # Progress bar mejorada
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        try:
            # Paso 1: Generar texto con Claude Sonnet 4
            status_text.text(f"üß† Generando {content_type} con Claude Sonnet 4...")
            progress_bar.progress(15)
            
            generated_text = generate_text_claude(
                user_prompt, content_type, anthropic_api_key, 
                claude_model, max_tokens_claude
            )
            
            if generated_text:
                # Guardar en session state
                st.session_state.generated_content['text'] = generated_text
                st.session_state.generated_content['text_metadata'] = {
                    'word_count': len(generated_text.split()),
                    'char_count': len(generated_text),
                    'content_type': content_type,
                    'timestamp': int(time.time())
                }
                
                progress_bar.progress(30)
                
                # Paso 1.5: NUEVO - An√°lisis de personajes si est√° en modo secuencia
                if st.session_state.character_sequence_mode:
                    status_text.text("üé≠ Analizando personajes para secuencia...")
                    progress_bar.progress(35)
                    
                    character_analysis = analyze_characters_with_claude(
                        generated_text, content_type, anthropic_api_key, claude_model
                    )
                    
                    if character_analysis.get("has_characters", False):
                        st.session_state.character_analysis = character_analysis
                        st.success(f"‚úÖ Detectados {len(character_analysis['characters'])} personajes para secuencia")
                    else:
                        st.warning("‚ö†Ô∏è No se detectaron personajes. Se generar√° imagen √∫nica.")
                        st.session_state.character_sequence_mode = False
                
                # Paso 2: Generar imagen(es)
                if st.session_state.character_sequence_mode and st.session_state.character_analysis:
                    # Modo secuencia: generar m√∫ltiples im√°genes
                    status_text.text("üé¨ Generando secuencia de im√°genes con personajes...")
                    progress_bar.progress(40)
                    
                    flux_config = {
                        "api_key": bfl_api_key,
                        "model": flux_model,
                        "width": image_width,
                        "height": image_height,
                        "steps": flux_steps,
                        "style": image_style
                    }
                    
                    sequence_results = generate_character_sequence(
                        generated_text, content_type, st.session_state.character_analysis, flux_config
                    )
                    
                    if sequence_results["success"]:
                        st.session_state.character_images = sequence_results["character_cards"]
                        st.session_state.sequence_generation_complete = True
                        progress_bar.progress(70)
                    else:
                        st.error("‚ùå Error generando secuencia de personajes")
                        progress_bar.progress(40)
                else:
                    # Modo normal: generar imagen √∫nica
                    status_text.text(f"üé® Analizando {content_type} y generando imagen con Flux...")
                    progress_bar.progress(40)
                    
                    generated_image, used_prompt = generate_image_flux(
                        generated_text, content_type, bfl_api_key, flux_model,
                        image_width, image_height, flux_steps, image_style, 
                        image_prompt, anthropic_api_key, claude_model
                    )
                    
                    if generated_image:
                        # Guardar imagen en session state con informaci√≥n del prompt
                        img_buffer = io.BytesIO()
                        generated_image.save(img_buffer, format="PNG", quality=95)
                        img_bytes = img_buffer.getvalue()
                        
                        st.session_state.generated_content['image'] = img_bytes
                        st.session_state.generated_content['image_obj'] = generated_image
                        st.session_state.generated_content['image_metadata'] = {
                            'width': image_width,
                            'height': image_height,
                            'model': flux_model,
                            'steps': flux_steps,
                            'style': image_style,
                            'custom_prompt': bool(image_prompt and image_prompt.strip()),
                            'used_prompt': used_prompt,
                            'prompt_intelligent': not bool(image_prompt and image_prompt.strip()),
                            'timestamp': int(time.time())
                        }
                    
                    progress_bar.progress(70)
                
                # Paso 3: Generar audio
                status_text.text("üó£Ô∏è Generando narraci√≥n en audio...")
                progress_bar.progress(85)
                
                generated_audio = generate_audio(generated_text, voice_model, openai_api_key)
                
                if generated_audio:
                    # Guardar audio en session state
                    st.session_state.generated_content['audio'] = generated_audio
                    st.session_state.generated_content['audio_metadata'] = {
                        'voice': voice_model,
                        'size_kb': len(generated_audio) / 1024,
                        'timestamp': int(time.time())
                    }
                
                # Marcar como completado
                st.session_state.generation_complete = True
                
                # Completado
                progress_bar.progress(100)
                status_text.text("‚úÖ ¬°Contenido multimedia generado exitosamente!")
                
                # Balloons solo una vez
                st.balloons()
                if st.session_state.character_sequence_mode and st.session_state.sequence_generation_complete:
                    st.success("üéâ **¬°Generaci√≥n con secuencia completada!** Tu contenido multimedia con personajes consistentes est√° listo.")
                else:
                    st.success("üéâ **¬°Generaci√≥n completada!** Tu contenido multimedia est√° listo.")
                
            else:
                st.error("‚ö† Error al generar el contenido de texto con Claude.")
                
        except Exception as e:
            st.error(f"‚ö† Error durante la generaci√≥n: {str(e)}")
            progress_bar.progress(0)
            status_text.text("‚ö† Generaci√≥n fallida")

# NUEVO: Proceso para generar solo secuencia (si ya existe texto)
if generate_sequence_button and st.session_state.generated_content.get('text'):
    if not bfl_api_key:
        st.error("‚ö† Necesitas la API key de Black Forest Labs para generar im√°genes.")
    else:
        st.info("üé¨ Generando solo secuencia de im√°genes...")
        
        # Analizar personajes del texto existente
        character_analysis = analyze_characters_with_claude(
            st.session_state.generated_content['text'], 
            st.session_state.generated_content['text_metadata']['content_type'],
            anthropic_api_key, claude_model
        )
        
        if character_analysis.get("has_characters", False):
            st.session_state.character_analysis = character_analysis
            
            flux_config = {
                "api_key": bfl_api_key,
                "model": flux_model,
                "width": image_width,
                "height": image_height,
                "steps": flux_steps,
                "style": image_style
            }
            
            sequence_results = generate_character_sequence(
                st.session_state.generated_content['text'],
                st.session_state.generated_content['text_metadata']['content_type'],
                character_analysis, flux_config
            )
            
            if sequence_results["success"]:
                st.session_state.character_images = sequence_results["character_cards"]
                st.session_state.sequence_generation_complete = True
                st.success("üéâ ¬°Secuencia de personajes generada!")
            else:
                st.error("‚ùå Error generando secuencia")
        else:
            st.warning("‚ö†Ô∏è No se detectaron personajes en el texto para crear secuencia.")
# ===== MOSTRAR CONTENIDO GENERADO DESDE SESSION STATE (MEJORADO CON SECUENCIAS) =====
if st.session_state.generation_complete and st.session_state.generated_content:
    # Contenedores para resultados
    text_container = st.container()
    image_container = st.container()
    audio_container = st.container()
    
    # Mostrar texto (MEJORADO para nuevas tipolog√≠as)
    if 'text' in st.session_state.generated_content:
        with text_container:
            metadata = st.session_state.generated_content.get('text_metadata', {})
            content_type_display = metadata.get('content_type', 'texto')
            
            # Emojis por tipo de contenido
            content_emojis = {
                "ejercicio": "üìö", "art√≠culo": "üì∞", "texto": "üìù", "relato": "üìñ",
                "di√°logo situacional": "üó£Ô∏è", "art√≠culo cultural": "üé≠", 
                "art√≠culo de actualidad": "üì∫", "art√≠culo biogr√°fico": "üë§",
                "clip de noticias": "üì±", "pregunta de debate": "üí≠",
                "receta de cocina": "üë®‚Äçüç≥", "post de redes sociales": "üì≤",
                "trivia cultural": "üß†"
            }
            
            emoji = content_emojis.get(content_type_display, "üìÑ")
            st.header(f"{emoji} {content_type_display.title()} Generado por Claude")
            
            st.markdown(st.session_state.generated_content['text'])
            
            # M√©tricas del texto
            word_count = metadata.get('word_count', 0)
            char_count = metadata.get('char_count', 0)
            
            # Informaci√≥n espec√≠fica por tipo
            type_info = {
                "di√°logo situacional": f"Conversaci√≥n de {word_count} palabras con expresiones clave",
                "art√≠culo cultural": f"Art√≠culo cultural de {word_count} palabras con glosario",
                "art√≠culo de actualidad": f"Noticia simplificada de {word_count} palabras con preguntas",
                "art√≠culo biogr√°fico": f"Biograf√≠a de {word_count} palabras con dato curioso",
                "clip de noticias": f"5 clips de noticias en {word_count} palabras total",
                "pregunta de debate": f"Pregunta de debate en {word_count} palabras",
                "receta de cocina": f"Receta de {word_count} palabras con ingredientes y pasos",
                "post de redes sociales": f"Post de {word_count} palabras con emojis y hashtags",
                "trivia cultural": f"6 preguntas de trivia con {word_count} palabras"
            }
            
            display_info = type_info.get(content_type_display, f"üìä {word_count} palabras ‚Ä¢ {char_count} caracteres")
            st.caption(display_info)
            
            # Bot√≥n para descargar texto con key √∫nica
            text_timestamp = metadata.get('timestamp', int(time.time()))
            st.download_button(
                label="üì• Descargar Texto",
                data=st.session_state.generated_content['text'],
                file_name=f"{content_type_display.replace(' ', '_')}_claude_{text_timestamp}.txt",
                mime="text/plain",
                key=f"download_text_{text_timestamp}"
            )

    # NUEVO: Mostrar secuencia de personajes si existe
    if st.session_state.sequence_generation_complete and st.session_state.character_images:
        with image_container:
            st.header("üé≠ Secuencia de Personajes Generada por Flux")
            
            total_images = sum(len(card["images"]) for card in st.session_state.character_images)
            st.success(f"‚úÖ Secuencia completada: {len(st.session_state.character_images)} personajes, {total_images} im√°genes")
            
            # Mostrar im√°genes por personaje
            for i, character_card in enumerate(st.session_state.character_images):
                st.subheader(f"üë§ {character_card['name']} (Seed: {character_card['seed']})")
                
                if character_card["images"]:
                    # Crear columnas para mostrar im√°genes del personaje
                    cols = st.columns(min(len(character_card["images"]), 3))
                    
                    for j, image_data in enumerate(character_card["images"]):
                        with cols[j % 3]:
                            st.image(
                                image_data["image_obj"], 
                                caption=f"{image_data['scene']}",
                                use_container_width=True
                            )
                            
                            # Mostrar informaci√≥n de la imagen
                            with st.expander(f"üìã Info: {image_data['scene']}"):
                                st.code(image_data["prompt"], language="text")
                                st.caption(f"Seed: {image_data['seed']} | Personaje: {image_data['character_name']}")
                            
                            # Bot√≥n de descarga individual
                            st.download_button(
                                label="üì• Descargar",
                                data=image_data["image_bytes"],
                                file_name=f"{character_card['name']}_{image_data['scene'].replace(' ', '_')}.png",
                                mime="image/png",
                                key=f"download_char_img_{i}_{j}_{image_data['timestamp']}"
                            )
                else:
                    st.warning(f"No se generaron im√°genes para {character_card['name']}")
            
            # Bot√≥n para descargar todas las im√°genes como ZIP
            if total_images > 0:
                import zipfile
                zip_buffer = io.BytesIO()
                
                with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
                    for character_card in st.session_state.character_images:
                        for image_data in character_card["images"]:
                            filename = f"{character_card['name']}_{image_data['scene'].replace(' ', '_')}.png"
                            zip_file.writestr(filename, image_data["image_bytes"])
                
                st.download_button(
                    label="üì¶ Descargar Todas las Im√°genes (ZIP)",
                    data=zip_buffer.getvalue(),
                    file_name=f"secuencia_personajes_{int(time.time())}.zip",
                    mime="application/zip",
                    key=f"download_all_sequence_{int(time.time())}"
                )
    
    # Mostrar imagen √∫nica (modo normal)
    elif 'image_obj' in st.session_state.generated_content:
        with image_container:
            st.header("üñºÔ∏è Imagen Generada por Flux")
            
            metadata = st.session_state.generated_content.get('image_metadata', {})
            width = metadata.get('width', 'N/A')
            height = metadata.get('height', 'N/A')
            model = metadata.get('model', 'N/A')
            style = metadata.get('style', 'N/A')
            custom_prompt_used = metadata.get('custom_prompt', False)
            intelligent_prompt = metadata.get('prompt_intelligent', False)
            used_prompt = metadata.get('used_prompt', '')
            
            # Descripci√≥n mejorada con informaci√≥n del tipo de prompt
            if custom_prompt_used:
                prompt_info = "Con prompt personalizado"
                prompt_color = "üü¢"
            elif intelligent_prompt:
                prompt_info = "Prompt inteligente por Claude"
                prompt_color = "üîµ"
            else:
                prompt_info = "Prompt b√°sico autom√°tico"
                prompt_color = "üü°"
            
            caption = f"Generada con {model} ‚Ä¢ {width}x{height}px ‚Ä¢ Estilo: {style} ‚Ä¢ {prompt_color} {prompt_info}"
            
            st.image(
                st.session_state.generated_content['image_obj'], 
                caption=caption
            )
            
            # Informaci√≥n del prompt usado
            with st.expander("üîç Ver prompt utilizado para la imagen"):
                st.code(used_prompt, language="text")
                if intelligent_prompt:
                    st.success("üß† Este prompt fue generado por Claude analizando todo el contenido del texto")
                elif custom_prompt_used:
                    st.info("üë§ Este fue tu prompt personalizado")
                else:
                    st.warning("‚öôÔ∏è Prompt b√°sico generado autom√°ticamente")
            
            # Informaci√≥n adicional
            if custom_prompt_used:
                st.success("‚ú® Se utiliz√≥ tu prompt personalizado para la imagen")
            elif intelligent_prompt:
                st.success("ü§ñ Claude analiz√≥ el contenido completo para generar un prompt visual optimizado")
            else:
                st.info("‚öôÔ∏è Se us√≥ el m√©todo b√°sico de generaci√≥n de prompt")
            
            # Bot√≥n para descargar imagen con key √∫nica
            img_timestamp = metadata.get('timestamp', int(time.time()))
            st.download_button(
                label="üì• Descargar Imagen",
                data=st.session_state.generated_content['image'],
                file_name=f"flux_image_{img_timestamp}.png",
                mime="image/png",
                key=f"download_image_{img_timestamp}"
            )
    
    # Mostrar audio
    if 'audio' in st.session_state.generated_content:
        with audio_container:
            st.header("üéµ Audio Generado")
            st.audio(st.session_state.generated_content['audio'], format="audio/mp3")
            
            # Informaci√≥n del audio
            metadata = st.session_state.generated_content.get('audio_metadata', {})
            voice = metadata.get('voice', 'N/A')
            size_kb = metadata.get('size_kb', 0)
            
            st.caption(f"üéß Voz: {voice} ‚Ä¢ Tama√±o: {size_kb:.1f} KB")
            
            # Bot√≥n para descargar audio con key √∫nica
            audio_timestamp = metadata.get('timestamp', int(time.time()))
            st.download_button(
                label="üì• Descargar Audio",
                data=st.session_state.generated_content['audio'],
                file_name=f"audio_tts_{audio_timestamp}.mp3",
                mime="audio/mp3",
                key=f"download_audio_{audio_timestamp}"
            )
    
    # Estad√≠sticas finales (MEJORADAS CON SECUENCIAS)
    with st.expander("üìà Estad√≠sticas de generaci√≥n"):
        if st.session_state.sequence_generation_complete:
            # Estad√≠sticas para modo secuencia
            col_stats1, col_stats2, col_stats3, col_stats4 = st.columns(4)
            
            text_meta = st.session_state.generated_content.get('text_metadata', {})
            total_images = sum(len(card["images"]) for card in st.session_state.character_images)
            total_characters = len(st.session_state.character_images)
            
            with col_stats1:
                st.metric("Palabras generadas", text_meta.get('word_count', 0))
            with col_stats2:
                st.metric("Personajes detectados", total_characters)
            with col_stats3:
                st.metric("Im√°genes en secuencia", total_images)
            with col_stats4:
                content_type = text_meta.get('content_type', 'texto')
                st.metric("Tipo contenido", content_type.title())
        else:
            # Estad√≠sticas para modo normal
            col_stats1, col_stats2, col_stats3, col_stats4 = st.columns(4)
            
            text_meta = st.session_state.generated_content.get('text_metadata', {})
            image_meta = st.session_state.generated_content.get('image_metadata', {})
            
            with col_stats1:
                st.metric("Palabras generadas", text_meta.get('word_count', 0))
            with col_stats2:
                width = image_meta.get('width', 0)
                height = image_meta.get('height', 0)
                st.metric("Resoluci√≥n imagen", f"{width}x{height}" if width and height else "N/A")
            with col_stats3:
                st.metric("Pasos Flux", image_meta.get('steps', 0))
            with col_stats4:
                content_type = text_meta.get('content_type', 'texto')
                st.metric("Tipo contenido", content_type.title())
    
    # Bot√≥n para limpiar y empezar de nuevo
    if st.button("üîÑ Generar Nuevo Contenido", type="secondary"):
        st.session_state.generated_content = {}
        st.session_state.generation_complete = False
        st.session_state.character_analysis = None
        st.session_state.character_images = []
        st.session_state.sequence_generation_complete = False
        st.rerun()

# ===== INFORMACI√ìN ADICIONAL EN EL FOOTER =====
st.markdown("---")

# Tabs informativas (ACTUALIZADAS CON NUEVAS FUNCIONALIDADES)
tab1, tab2, tab3, tab4 = st.tabs(["üìö Instrucciones", "üîë APIs", "üí° Consejos", "‚ö° Modelos"])

with tab1:
    st.markdown("""
    ### C√≥mo usar la aplicaci√≥n:
    
    1. **üîß Configura las APIs**: Ingresa tus claves en la barra lateral
    2. **‚úèÔ∏è Escribe tu prompt**: Describe detalladamente qu√© quieres generar  
    3. **üìã Selecciona el tipo**: Ahora con **13 tipolog√≠as** diferentes disponibles
    4. **üé≠ Activa secuencias**: Para contenido con personajes (opcional)
    5. **‚öôÔ∏è Personaliza**: Ajusta modelos y configuraciones seg√∫n tus necesidades
    6. **üöÄ Genera**: Presiona el bot√≥n y espera tu contenido multimedia completo
    
    ### üÜï **Nuevas funcionalidades:**
    
    **üé≠ Modo Secuencia de Personajes:**
    - Detecta autom√°ticamente personajes en relatos y cuentos
    - Genera m√∫ltiples im√°genes con el mismo personaje
    - Usa seeds consistentes para mantener apariencia
    - Perfect para cuentos infantiles y material educativo
    
    **üìã 13 Tipolog√≠as Especializadas:**
    - Cada tipo tiene prompts optimizados
    - Formatos espec√≠ficos y extensiones adaptadas
    - Ejemplos y plantillas incluidas
    """)

with tab2:
    st.markdown("""
    ### APIs necesarias:
    
    **üß† Anthropic API (Claude Sonnet 4)**
    - Reg√≠strate en: https://console.anthropic.com/
    - Usado para: Generaci√≥n de texto + An√°lisis de personajes + Prompts visuales inteligentes
    
    **üé® Black Forest Labs API (Flux)**
    - Reg√≠strate en: https://api.bfl.ml/
    - Usado para: Generaci√≥n de im√°genes + Secuencias con seeds consistentes
    
    **üó£Ô∏è OpenAI API (TTS)**
    - Reg√≠strate en: https://platform.openai.com/
    - Usado para: Conversi√≥n de texto a voz de alta calidad
    """)

with tab3:
    st.markdown("""
    ### Consejos para mejores resultados:
    
    **üìù Para secuencias de personajes:**
    - Describe claramente los personajes en tu relato
    - Incluye caracter√≠sticas f√≠sicas espec√≠ficas
    - Usa nombres para los personajes principales
    - El sistema funciona mejor con 1-3 personajes
    
    **üé® Para im√°genes:**
    - **Autom√°tico Inteligente**: Claude adapta el an√°lisis visual a cada tipolog√≠a
    - **Personalizado**: Escribe tu prompt EN INGL√âS para control total
    - **Seeds consistentes**: Garantizan el mismo personaje en m√∫ltiples im√°genes
    """)

with tab4:
    st.markdown("""
    ### Informaci√≥n de los modelos:
    
    **üß† Claude Sonnet 4 (2025)**
    - An√°lisis de personajes con IA
    - Generaci√≥n de prompts visuales optimizados
    - 13 tipolog√≠as especializadas de contenido
    
    **üé® Flux Pro 1.1 / Ultra**
    - Generaci√≥n de im√°genes de alta calidad
    - Soporte para seeds consistentes
    - M√∫ltiples estilos visuales
    
    **üó£Ô∏è OpenAI TTS-1-HD**
    - 6 voces diferentes con personalidades √∫nicas
    - Calidad de audio profesional
    
    ### üé≠ **Sistema de Consistencia de Personajes:**
    
    **C√≥mo funciona:**
    1. Claude analiza el texto y detecta personajes
    2. Extrae caracter√≠sticas f√≠sicas espec√≠ficas
    3. Genera seed √∫nico por personaje
    4. Crea m√∫ltiples escenas con el mismo seed
    5. Resultado: Mismo personaje en diferentes situaciones
    
    **Casos de uso perfectos:**
    - Cuentos infantiles con protagonistas
    - Material educativo con personajes recurrentes
    - Relatos con secuencias narrativas
    - Historias que requieren continuidad visual
    """)
